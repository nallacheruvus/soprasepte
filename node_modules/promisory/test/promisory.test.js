const chai = require('chai');
const request = require('request');
const should = chai.should();
const promisory = require('../index');

/**
 * Our custom fetch API
 * We can use any other package actually
 * 
 * @param {string} url 
 */
function fetchAPI(url) {
  return new Promise((resolve, reject) => {
    request(url, (error, response, body) => {
      if(error) reject(error);  
      if(response) resolve(response);
    });
  });
}

/**
 * Define our function to make the API call
 * This menthod uses the fetchAPI defined above
 * @param {*} url 
 * @param {*} callback 
 */
function getDocuments(url, callback) {
  return fetchAPI(url)
    .then((response) => promisory.resolve(response, callback))
}

describe('The Promisory Module', () => {

  describe('the resolve method', () => {
    const result = { value: true };
    
    it('should accept a callback', (done) => {
      promisory.resolve(result, (error, result) => {
        result.value.should.equal(true);
        done();
      });
    });
    it('should have error `null`', (done) => {
      promisory.resolve(result, (error, result) => {
        should.not.exist(error);
        done();
      });
    });
    it('should return valid data', (done) => {
      promisory.resolve(result, (error, result) => {
        result.should.be.an('object');
        result.value.should.equal(true);
        done();
      });
    });
    it('should accept a promise', (done) => {
      promisory.resolve(result)
        .then((result) => {
          result.should.be.an('object');
          done();
        });
    });
    it('should resolve with valid data', (done) => {
      promisory.resolve(result)
        .then((result) => {
          result.value.should.equal(true);
          done();
        });
    });
  });

  describe('the reject method', () => {
    const result = { value: false };
    
    it('should accept a callback', (done) => {
      promisory.reject(result, (error) => {
        error.value.should.equal(false);
        done();
      });
    });
    it('should have error data', (done) => {
      promisory.reject(result, (error) => {
        should.exist(error);
        done();
      });
    });
    it('should accept a promise', (done) => {
      promisory.reject(result)
        .catch((error) => {
          error.should.be.an('object')
          done();
        });
    });
    it('should resolve with valid data', (done) => {
      promisory.reject(result)
        .catch((error) => {
          error.value.should.equal(false);
          done();
        })
    });
  });

  describe('use case for <Promisory />', () => {
    const result = {
      name: 'Game of Thrones',
      author: 'George R. R. Martin',
      series: 'A Song of Ice and Fire',
      pages: 694
    };
    
    function fetchBook(book, callback) {
      if (typeof book === 'object' && book.id === '12345') {
          return promisory.resolve(result, callback)
      }
      return promisory.reject('An error occured', callback);
    }

    describe('use of callback', () => {
      it('should return a result with valid argument', (done) => {
        fetchBook({ id: '12345' }, function(error, book) {
          book.should.be.an('object');
          book.name.should.equal('Game of Thrones');
          book.author.should.equal('George R. R. Martin');
          book.series.should.equal('A Song of Ice and Fire');
          book.pages.should.equal(694);
          done();
        });
      });

      it('should return error', (done) => {
        fetchBook({ id: '' }, function(error, book) {
          error.should.be.a('string');
          error.should.equal('An error occured');
          done();
        });
      });
    });

    describe('use of promise', () => {
      it('should return a result with valid argument', async () => {
        const book =  await fetchBook({ id: '12345' });
        book.should.be.an('object');
        book.name.should.equal('Game of Thrones');
        book.author.should.equal('George R. R. Martin');
        book.series.should.equal('A Song of Ice and Fire');
        book.pages.should.equal(694);
      });

      it('should return error', (done) => {
        fetchBook({ id: '' })
          .catch((error) => {
            error.should.equal('An error occured');
            done();
          })
      });
    });
  });

  describe('Using with API calls <Composition /> is the key here', () => {
    it('Gets result from an API call using promise', (done) => {
      getDocuments('http://hermes-dms-develop.herokuapp.com/api/documents/')
        .then((response) => {
          response.should.be.an('object');
          done();
        });
    });
  
    it('Gets result from an API call using callback', (done) => {
      getDocuments('http://hermes-dms-develop.herokuapp.com/api/documents/', (error, result) => {
        result.should.be.an('object');
        done();
      });
    });
  });
});